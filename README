If you're running Slitheen on a remote machine, you'll need to choose a port for both vncviewer and the socks proxy. These ports should be unique per user otherwise the Docker containers won't work properly.

When you ssh to your remote machine, you'll need to use the -L option with this config: -L 5900:127.0.0.1:<vnc port>.


#### BUILDING

# Instructions to build slitheen (client and proxy)

# Requirements (with versions I used, if relevant):
#   ethtool
#   docker.io (18.03.1-ce)
#       be sure to set up Docker for use without sudo by adding the user to the Docker group
#   git (2.7.4)
#   vncviewer
#   golang (>= 1.7)
#   koko (go get github.com/redhat-nfvpe/koko)
#     koko should be installed with owner root, group docker, and mode 04750

mkdir slitheen; cd slitheen

echo "Fetching Slitheen repositories"

# Get the slifox hg repo
git clone https://gitlab.com/slitheen/slifox.git

# Get the slitheen code repos
git clone https://gitlab.com/slitheen/slitheen-client.git
git clone https://gitlab.com/slitheen/slitheen-relay.git

echo "Building and configuring the Docker containers (this may take a while...)"

# Get the build and test environments (Note: this may take a long time)
git clone https://gitlab.com/slitheen/test-env.git
cd test-env
./build-slitheen
./mktestenvconfig
sed -i s,/somewhere/slifox,$(cd ..; /bin/pwd)/slifox, testenv_config
sed -i s,/somewhere/slitheen/slitheen-relay,$(cd ..; /bin/pwd)/slitheen-relay, testenv_config
sed -i s,/somewhere/slitheen/slitheen-client,$(cd ..; /bin/pwd)/slitheen-client, testenv_config

# Start the slifox docker
# [NOTE] vnc port here is the same as the vnc port used when you ssh-ed into the remote machine
./ous_run <vnc port> <socks port>

    # Inside that docker, build slifox and the socks proxy and exit the
    # docker when finished
    ./mach build   # This will take a while
    
    # [NOTE: this is for if you're using the C client]
    cd ../client
    make
    exit

# Start the relay station docker
./relay_run

    # Inside that docker, build the slitheen relay
    make
    # Build the key generator and run it
    cd keygen
    make
    ./genkeys
    exit

# Copy the private and public keys to the right places
cp ../slitheen-relay/keygen/privkey ../slitheen-relay
cp ../slitheen-relay/keygen/pubkey ../slifox/
cp ../slitheen-relay/keygen/pubkey ../slitheen-client/

#### RUNNING

# You will need four terminals, each starting in the testenv directory
# (start them in this order):

# [NOTE] Any errors having to do with veth0 or veth1 can usually be solved
# by running `ifconfig veth{0,1} down`

A. ./relay_run

B. ./ous_run <vnc port> <socks port>

C. ./socks_run

D. ./net_run

    # Run (as root) the ethtool commands it outputs, if any
    # [ERROR] Cannot get device udp-fragmentation-offload settings: Operation not supported: This error is expected

# If on remote machine, run the following on your local machine;
    vncviewer localhost

# If not using a remote machine:
# Still in D:
    vncviewer localhost

# In A:
    sudo ./slitheen veth1_<username> eth0

   # [ERROR] Failed to activate device: delete veth0 and try again

# In B:
    
    # To start Slifox
    sudo ./mach run  # Wait for it to start up
    # [ERROR] Running Nightly as root in a regular user's session is not supported: 
   
   # To start the OUS
   cd ../client/client/ous/
   python3 slifox_driver.py -h | -e | -u {bv, video, random}
	# -h := Help
	# -e := Experiment Mode (WIP)
	# -u := set user mode
		# bv := Background Video mode
		# video := Video Only mode
		# random := Random Browsing Action mode

# In C:
    go run socks.go <socks port>


# If you start Slifox without the OUS now point your browser's SOCKS proxy to localhost:<socks port> while you load
# youtube videos in slifox. Otherwise the OUS will load content on its own.
